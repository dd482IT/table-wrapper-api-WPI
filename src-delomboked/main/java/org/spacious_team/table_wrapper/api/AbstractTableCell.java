// Generated by delombok at Wed May 03 14:02:02 EDT 2023
/*
 * Table Wrapper API
 * Copyright (C) 2021  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

import org.checkerframework.checker.nullness.qual.Nullable;
import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDateTime;

public abstract class AbstractTableCell<T> implements TableCell {
    private final T cell;
    private final CellDataAccessObject<T, ?> dao;

    @Override
    @Nullable
    public Object getValue() {
        return dao.getValue(cell);
    }

    @Override
    public int getIntValue() {
        return dao.getIntValue(cell);
    }

    @Override
    public long getLongValue() {
        return dao.getLongValue(cell);
    }

    @Override
    public Double getDoubleValue() {
        return dao.getDoubleValue(cell);
    }

    @Override
    public BigDecimal getBigDecimalValue() {
        return dao.getBigDecimalValue(cell);
    }

    @Override
    public String getStringValue() {
        return dao.getStringValue(cell);
    }

    @Override
    public Instant getInstantValue() {
        return dao.getInstantValue(cell);
    }

    @Override
    public LocalDateTime getLocalDateTimeValue() {
        return dao.getLocalDateTimeValue(cell);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "AbstractTableCell(cell=" + this.getCell() + ", dao=" + this.getDao() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AbstractTableCell)) return false;
        final AbstractTableCell<?> other = (AbstractTableCell<?>) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$cell = this.getCell();
        final java.lang.Object other$cell = other.getCell();
        if (this$cell == null ? other$cell != null : !this$cell.equals(other$cell)) return false;
        final java.lang.Object this$dao = this.getDao();
        final java.lang.Object other$dao = other.getDao();
        if (this$dao == null ? other$dao != null : !this$dao.equals(other$dao)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AbstractTableCell;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $cell = this.getCell();
        result = result * PRIME + ($cell == null ? 43 : $cell.hashCode());
        final java.lang.Object $dao = this.getDao();
        result = result * PRIME + ($dao == null ? 43 : $dao.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    protected T getCell() {
        return this.cell;
    }

    @java.lang.SuppressWarnings("all")
    protected CellDataAccessObject<T, ?> getDao() {
        return this.dao;
    }

    @java.lang.SuppressWarnings("all")
    protected AbstractTableCell(final T cell, final CellDataAccessObject<T, ?> dao) {
        this.cell = cell;
        this.dao = dao;
    }
}
