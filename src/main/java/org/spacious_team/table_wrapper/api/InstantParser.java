// Generated by delombok at Sat Mar 25 11:54:07 EDT 2023
/*
 * Table Wrapper API
 * Copyright (C) 2022  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

import org.checkerframework.checker.nullness.qual.Nullable;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalQueries;

/**
 * Parses Instant. Date time format can be derived from cell value or can be configured.
 * Some date time value examples witch date time format can be correctly derived from parsing value:
 * <pre>
 * 2000-02-01
 * 01.02.2000
 * 2000.02.01
 * 01/02/2000
 * 2000/02/01
 * 20:10:02
 * 20:10:02.000
 * 2000-02-01T20:10:02
 * 01.02.2000 20:10:02
 * 01.02.2000 20:10:02.000
 * 20:10:02 2000/02/01
 * 20:10:02.000 2000/02/01
 * 2000-02-01T20:10:02Z
 * 01.02.2000 20:10:02Z
 * 01.02.2000 20:10:02.000Z
 * 20:10:02 2000/02/01Z
 * 01.02.2000 20:10:02UTC
 * 01.02.2000 20:10:02GMT
 * 01.02.2000 20:10:02Europe/Moscow
 * 01.02.2000 20:10:02.000Europe/Moscow
 * 01.02.2000 20:10:02MSK
 * 2000-02-01T20:10:02+0300
 * 01.02.2000 20:10:02+0300
 * 2000-02-01T20:10:02+03:00
 * 01.02.2000 20:10:02+03:00
 * 01.02.2000 20:10:02+03:00:00
 * 01.02.2000 20:10:02GMT+3
 * 01.02.2000 20:10:02GMT+3:00
 * 01.02.2000 20:10:02GMT+03:00
 * 01.02.2000 20:10:02GMT+03:00:00
 * 01.02.2000 20:10:02.000GMT+03:00:00
 * </pre>
 *
 * @implSpec If cell value doesn't contain zone name, when configured value used.
 * If cell value doesn't contain date, when configured value used (default configuration value is current date).
 * If cell value doesn't contain time, when configured value used (default configuration value is 12:00:00).
 */
public class InstantParser {
    public static final InstantParser INSTANCE = InstantParser.builder().build();
    /**
     * If null, date time format is derived from value
     */
    private final DateTimeFormatter dateTimeFormatter;
    private final LocalDate defaultDate;
    private final LocalTime defaultTime;
    private final ZoneId defaultZoneId;

    /**
     * @throws DateTimeParseException If value can't be parsed
     */
    public Instant parseInstant(String value) {
        if (isCustomDateTimeFormat()) {
            return parseCustomFormatInstant(value);
        }
        int length = value.length();
        if (length == 8 || length == 12) {
            // without and with millis
            DateTimeFormatter formatter = getConfiguredOrParsedDateTimeFormatter(value);
            return LocalTime.parse(value, formatter).atDate(getDefaultDateOrNow()).atZone(defaultZoneId).toInstant();
        } else if (length == 10) {
            DateTimeFormatter formatter = getConfiguredOrParsedDateTimeFormatter(value);
            return LocalDate.parse(value, formatter).atTime(defaultTime).atZone(defaultZoneId).toInstant();
        } else if (length == 19 || length == 23) {
            // without and with millis
            DateTimeFormatter formatter = getConfiguredOrParsedDateTimeFormatter(value);
            return LocalDateTime.parse(value, formatter).atZone(defaultZoneId).toInstant();
        } else if (length > 19) {
            DateTimeFormatter formatter = getConfiguredOrParsedDateTimeFormatter(value);
            return ZonedDateTime.parse(value, formatter).toInstant();
        }
        throw new DateTimeParseException("Not an instant", value, 0);
    }

    private boolean isCustomDateTimeFormat() {
        return dateTimeFormatter != null;
    }

    private Instant parseCustomFormatInstant(String value) {
        DateTimeFormatter formatter = getConfiguredOrParsedDateTimeFormatter(value);
        TemporalAccessor ta = formatter.parse(value);
        LocalDate localDate = ta.query(TemporalQueries.localDate());
        if (localDate == null) {
            localDate = getDefaultDateOrNow();
        }
        LocalTime localTime = ta.query(TemporalQueries.localTime());
        ZoneId zoneId = ta.query(TemporalQueries.zone());
        return localDate.atTime((localTime == null) ? defaultTime : localTime).atZone((zoneId == null) ? defaultZoneId : zoneId).toInstant();
    }

    private DateTimeFormatter getConfiguredOrParsedDateTimeFormatter(String value) {
        if (dateTimeFormatter == null) {
            return DateTimeFormatParser.getDateTimeFormatter(value);
        }
        return dateTimeFormatter;
    }

    private LocalDate getDefaultDateOrNow() {
        if (defaultDate == null) {
            return LocalDate.now();
        }
        return defaultDate;
    }

    @java.lang.SuppressWarnings("all")
    private static LocalTime $default$defaultTime() {
        return LocalTime.MIDNIGHT;
    }

    @java.lang.SuppressWarnings("all")
    private static ZoneId $default$defaultZoneId() {
        return ZoneId.systemDefault();
    }

    @java.lang.SuppressWarnings("all")
    InstantParser(final DateTimeFormatter dateTimeFormatter, final LocalDate defaultDate, final LocalTime defaultTime, final ZoneId defaultZoneId) {
        this.dateTimeFormatter = dateTimeFormatter;
        this.defaultDate = defaultDate;
        this.defaultTime = defaultTime;
        this.defaultZoneId = defaultZoneId;
    }


    @java.lang.SuppressWarnings("all")
    public static class InstantParserBuilder {
        @java.lang.SuppressWarnings("all")
        private DateTimeFormatter dateTimeFormatter;
        @java.lang.SuppressWarnings("all")
        private LocalDate defaultDate;
        @java.lang.SuppressWarnings("all")
        private boolean defaultTime$set;
        @java.lang.SuppressWarnings("all")
        private LocalTime defaultTime$value;
        @java.lang.SuppressWarnings("all")
        private boolean defaultZoneId$set;
        @java.lang.SuppressWarnings("all")
        private ZoneId defaultZoneId$value;

        @java.lang.SuppressWarnings("all")
        InstantParserBuilder() {
        }

        /**
         * If null, date time format is derived from value
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public InstantParser.InstantParserBuilder dateTimeFormatter(final DateTimeFormatter dateTimeFormatter) {
            this.dateTimeFormatter = dateTimeFormatter;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public InstantParser.InstantParserBuilder defaultDate(final LocalDate defaultDate) {
            this.defaultDate = defaultDate;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public InstantParser.InstantParserBuilder defaultTime(final LocalTime defaultTime) {
            this.defaultTime$value = defaultTime;
            defaultTime$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public InstantParser.InstantParserBuilder defaultZoneId(final ZoneId defaultZoneId) {
            this.defaultZoneId$value = defaultZoneId;
            defaultZoneId$set = true;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InstantParser build() {
            LocalTime defaultTime$value = this.defaultTime$value;
            if (!this.defaultTime$set) defaultTime$value = InstantParser.$default$defaultTime();
            ZoneId defaultZoneId$value = this.defaultZoneId$value;
            if (!this.defaultZoneId$set) defaultZoneId$value = InstantParser.$default$defaultZoneId();
            return new InstantParser(this.dateTimeFormatter, this.defaultDate, defaultTime$value, defaultZoneId$value);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "InstantParser.InstantParserBuilder(dateTimeFormatter=" + this.dateTimeFormatter + ", defaultDate=" + this.defaultDate + ", defaultTime$value=" + this.defaultTime$value + ", defaultZoneId$value=" + this.defaultZoneId$value + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static InstantParser.InstantParserBuilder builder() {
        return new InstantParser.InstantParserBuilder();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "InstantParser(dateTimeFormatter=" + this.dateTimeFormatter + ", defaultDate=" + this.defaultDate + ", defaultTime=" + this.defaultTime + ", defaultZoneId=" + this.defaultZoneId + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof InstantParser)) return false;
        final InstantParser other = (InstantParser) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$dateTimeFormatter = this.dateTimeFormatter;
        final java.lang.Object other$dateTimeFormatter = other.dateTimeFormatter;
        if (this$dateTimeFormatter == null ? other$dateTimeFormatter != null : !this$dateTimeFormatter.equals(other$dateTimeFormatter)) return false;
        final java.lang.Object this$defaultDate = this.defaultDate;
        final java.lang.Object other$defaultDate = other.defaultDate;
        if (this$defaultDate == null ? other$defaultDate != null : !this$defaultDate.equals(other$defaultDate)) return false;
        final java.lang.Object this$defaultTime = this.defaultTime;
        final java.lang.Object other$defaultTime = other.defaultTime;
        if (this$defaultTime == null ? other$defaultTime != null : !this$defaultTime.equals(other$defaultTime)) return false;
        final java.lang.Object this$defaultZoneId = this.defaultZoneId;
        final java.lang.Object other$defaultZoneId = other.defaultZoneId;
        if (this$defaultZoneId == null ? other$defaultZoneId != null : !this$defaultZoneId.equals(other$defaultZoneId)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof InstantParser;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $dateTimeFormatter = this.dateTimeFormatter;
        result = result * PRIME + ($dateTimeFormatter == null ? 43 : $dateTimeFormatter.hashCode());
        final java.lang.Object $defaultDate = this.defaultDate;
        result = result * PRIME + ($defaultDate == null ? 43 : $defaultDate.hashCode());
        final java.lang.Object $defaultTime = this.defaultTime;
        result = result * PRIME + ($defaultTime == null ? 43 : $defaultTime.hashCode());
        final java.lang.Object $defaultZoneId = this.defaultZoneId;
        result = result * PRIME + ($defaultZoneId == null ? 43 : $defaultZoneId.hashCode());
        return result;
    }
}
