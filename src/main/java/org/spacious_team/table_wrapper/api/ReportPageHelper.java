// Generated by delombok at Sat Mar 25 11:54:07 EDT 2023
/*
 * Table Wrapper API
 * Copyright (C) 2022  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

import java.util.function.Predicate;
import static lombok.AccessLevel.PRIVATE;

final class ReportPageHelper {
    static Predicate<Object> getCellStringValueIgnoreCasePrefixPredicate(String prefix) {
        return new StringIgnoreCasePrefixPredicate(prefix);
    }


    static final class StringIgnoreCasePrefixPredicate implements Predicate<Object> {
        private final String lowercasePrefix;

        private StringIgnoreCasePrefixPredicate(String prefix) {
            this.lowercasePrefix = prefix.trim().toLowerCase();
        }

        @Override
        public boolean test(Object cell) {
            return (cell instanceof String) && ((String) cell).trim().toLowerCase().startsWith(lowercasePrefix);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "ReportPageHelper.StringIgnoreCasePrefixPredicate(lowercasePrefix=" + this.lowercasePrefix + ")";
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof ReportPageHelper.StringIgnoreCasePrefixPredicate)) return false;
            final ReportPageHelper.StringIgnoreCasePrefixPredicate other = (ReportPageHelper.StringIgnoreCasePrefixPredicate) o;
            final java.lang.Object this$lowercasePrefix = this.lowercasePrefix;
            final java.lang.Object other$lowercasePrefix = other.lowercasePrefix;
            if (this$lowercasePrefix == null ? other$lowercasePrefix != null : !this$lowercasePrefix.equals(other$lowercasePrefix)) return false;
            return true;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $lowercasePrefix = this.lowercasePrefix;
            result = result * PRIME + ($lowercasePrefix == null ? 43 : $lowercasePrefix.hashCode());
            return result;
        }
    }

    @java.lang.SuppressWarnings("all")
    private ReportPageHelper() {
    }
}
