// Generated by delombok at Thu Mar 16 15:46:21 EDT 2023
/*
 * Table Wrapper API
 * Copyright (C) 2020  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

import org.checkerframework.checker.nullness.qual.Nullable;
import java.util.Arrays;
import java.util.Objects;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import static java.util.regex.Pattern.CASE_INSENSITIVE;
import static java.util.regex.Pattern.UNICODE_CASE;
import static lombok.AccessLevel.PRIVATE;

/**
 * Finds cell column index by case-insensitive checks by all the predefined regexp patterns.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class PatternTableColumn implements TableColumn {

    private final Pattern[] patterns;

    private final Set<String> words;

    /**
     * Cell text should match to all regexp patterns.
     */
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumn of(String... words) {
        //noinspection ConstantConditions
        if (words == null) {
            return LEFTMOST_COLUMN;
        }
        Set<String> nonNullWords = Arrays.stream(words).filter(Objects::nonNull).filter(s -> !s.isEmpty()).collect(Collectors.toUnmodifiableSet());
        Pattern[] patterns = nonNullWords.stream().map(PatternTableColumn::toPattern).toArray(Pattern[]::new);
        if (patterns.length == 0) {
            return LEFTMOST_COLUMN;
        }
        return new PatternTableColumn(patterns, nonNullWords);
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getColumnIndex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PatternTableColumn this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int firstColumnForSearch, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPageRow@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... headerRows) {
        for (ReportPageRow header : headerRows) {
            for (TableCell cell : header) {
                Object value;
                if (cell != null && cell.getColumnIndex() >= firstColumnForSearch && (value = cell.getValue()) != null && value instanceof CharSequence && matches((CharSequence) value)) {
                    return cell.getColumnIndex();
                }
            }
        }
        throw new TableColumnNotFound("Header including \'" + String.join(", ", words) + "\' is not found");
    }

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean matches(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CharSequence cellText) {
        for (Pattern pattern : patterns) {
            if (!pattern.matcher(cellText).find()) {
                return false;
            }
        }
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Pattern toPattern(String pattern) {
        return Pattern.compile(pattern, CASE_INSENSITIVE | UNICODE_CASE);
    }

    @org.checkerframework.dataflow.qual.Pure
    public java.lang.String toString() {
        return "PatternTableColumn(words=" + this.words + ")";
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof PatternTableColumn))
            return false;
        final PatternTableColumn other = (PatternTableColumn) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        final java.lang.Object this$words = this.words;
        final java.lang.Object other$words = other.words;
        if (this$words == null ? other$words != null : !this$words.equals(other$words))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PatternTableColumn;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $words = this.words;
        result = result * PRIME + ($words == null ? 43 : $words.hashCode());
        return result;
    }

    private PatternTableColumn(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Pattern @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] patterns, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<String> words) {
        this.patterns = patterns;
        this.words = words;
    }
}
