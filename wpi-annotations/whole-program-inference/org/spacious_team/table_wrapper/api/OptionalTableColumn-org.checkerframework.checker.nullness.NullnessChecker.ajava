// Generated by delombok at Thu Mar 16 15:46:21 EDT 2023
/*
 * Table Wrapper API
 * Copyright (C) 2020  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

import static lombok.AccessLevel.PRIVATE;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class OptionalTableColumn implements TableColumn {

    private final TableColumn column;

    private final AnyOfTableColumn anyOfTableColumn;

    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OptionalTableColumn of(TableColumn column) {
        return new OptionalTableColumn(column, AnyOfTableColumn.of(column, TableColumn.NOCOLUMN));
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getColumnIndex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OptionalTableColumn this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int firstColumnForSearch, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPageRow@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... headerRows) {
        try {
            return anyOfTableColumn.getColumnIndex(firstColumnForSearch, headerRows);
        } catch (Exception e) {
            throw new OptionalTableColumnNotFound(e);
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public java.lang.String toString() {
        return "OptionalTableColumn(column=" + this.column + ")";
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof OptionalTableColumn))
            return false;
        final OptionalTableColumn other = (OptionalTableColumn) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        final java.lang.Object this$column = this.column;
        final java.lang.Object other$column = other.column;
        if (this$column == null ? other$column != null : !this$column.equals(other$column))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof OptionalTableColumn;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $column = this.column;
        result = result * PRIME + ($column == null ? 43 : $column.hashCode());
        return result;
    }

    private OptionalTableColumn(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumn column, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AnyOfTableColumn anyOfTableColumn) {
        this.column = column;
        this.anyOfTableColumn = anyOfTableColumn;
    }
}
